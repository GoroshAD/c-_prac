//test shared_ptr
    SharedPtr<std::vector<int>> p1(new std::vector<int>(10));
    SharedPtr<std::vector<int>> p2(p1);
    (*p1)[0] = 1;

    //std::cout << *(*p1).begin() << std::endl;
    //std::cout << *(*p2).begin() << std::endl;

    p1.reset(new std::vector<int>(20));
    (*p1)[0] = 3;
    //std::cout << *(*p1).begin() << std::endl;
    //std::cout << *(*p2).begin() << std::endl;
    p1.swap(p2);
    //std::cout << *(*p1).begin() << std::endl;
    //std::cout << *(*p2).begin() << std::endl;
    std::cout << *p1.ref_count << std::endl;
    if (true) {
        auto p4(p1);
        p4 = p1;
        std::cout << *p1.ref_count << std::endl;
    }
    std::cout << *p1.ref_count << std::endl;
    std::cout << p1.ptr << std::endl;

    SharedPtr<std::vector<int>> p3(std::move(p1));

    /*auto tmp1 = SharedPtr<std::vector<int>>(new std::vector<int>(10));
    auto tmp2 = SharedPtr<std::vector<int>>(tmp1);
    std::vector<SharedPtr<std::vector<int>>> arr(2);
    arr.push_back(tmp1);*/